process {
        shell = ['/bin/bash', '-euo', 'pipefail', '\n', 'hostname >&2', '\n']
	executor = 'crg'
        penv = 'smp'
        queue = 'short-rocky9,long-centos79,biocore-el7,short-centos79'
	cpus = 1
	memory='12G'
        clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }
	cache='lenient'
	container = 'biocorecrg/mopprepr:0.7'
	containerOptions = { workflow.containerEngine == "docker" ? '-u $(id -u):$(id -g)': null}
        withLabel: big_mem_time {
             memory = '60G'
             time = '24h'
        }
        withLabel: big_time_cpus {
                cpus = 8
                memory = '60G'
                time = '24h'
                clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }

        }
       withLabel: big_cpus {
		cpus = 8
		memory = '8G'
	}
    withLabel: big_mem {
        cpus = 1
        memory = '80G'
    }
    withLabel: big_cpus_retry {
        errorStrategy = 'retry'
        cpus = 8
        memory = {8.GB * task.attempt}
        maxRetries = 3

    }
    withLabel: big_cpus_ignore {
        errorStrategy = 'ignore'
        cpus = 8
        memory = '8G'
    }
	withLabel: big_mem_cpus {
		time = '6h'
		cpus = 8
		memory = '60G'
	}
     withLabel: demulti_gpus {
         queue = 'gpu'
         memory = '12G'
         clusterOptions = {" -l gpu=1 -l virtual_free=${task.memory.toString().replaceAll(/[\sB]/,'')}"}
         containerOptions = { workflow.containerEngine == "singularity" ? '--nv':
         ( workflow.containerEngine == "docker" ? '-u $(id -u):$(id -g) --gpus all': null ) }
     }
	  withLabel: basecall_gpus {
   		queue = 'gpu'
   		memory = '8G'
   		clusterOptions = '-l gpu=1'
   		containerOptions = { workflow.containerEngine == "singularity" ? '--nv':
      		( workflow.containerEngine == "docker" ? '-u $(id -u):$(id -g) --gpus all': null ) }
	}
}
singularity.enabled = true
singularity.envWhitelist = "CUDA_VISIBLE_DEVICES,SGE_HGR_gpu"
//singularity.cacheDir = "/software/bi/biocore_tools/singularity_containers/"
